name: discord message

on:
  push:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # precisamos do hist√≥rico anterior para comparar arquivos
          fetch-depth: 2

      - name: Preparar mensagem para o Discord
        id: prep
        shell: bash
        run: |
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          ACTOR="${{ github.actor }}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          COMMIT_URL="https://github.com/${REPO}/commit/${COMMIT_SHA}"
          COMPARE_URL="${{ github.event.compare }}"
          # dados do head_commit (quando existir; em push com m√∫ltiplos commits pode vir vazio)
          AUTHOR_NAME="${{ github.event.head_commit.author.name || '' }}"
          AUTHOR_USERNAME="${{ github.event.head_commit.author.username || '' }}"
          HEAD_TS="${{ github.event.head_commit.timestamp || '' }}"
          RAW_MSG="${{ github.event.head_commit.message || '' }}"

          # t√≠tulo = primeira linha; corpo = demais linhas
          TITLE="$(printf "%s" "$RAW_MSG" | head -n1)"
          BODY="$(printf "%s" "$RAW_MSG" | tail -n +2 | sed ':a;N;$!ba;s/\r//g; s/\n/\\n/g')"
          [ -z "$TITLE" ] && TITLE="(sem t√≠tulo)"
          [ -z "$BODY" ] && BODY="‚Äî"

          # hor√°rio leg√≠vel
          CREATED_AT="$HEAD_TS"
          [ -z "$CREATED_AT" ] && CREATED_AT="$(date -u +"%Y-%m-%d %H:%M:%S UTC")"

          # arquivos alterados entre before e o sha atual (quando poss√≠vel)
          BEFORE="${{ github.event.before }}"
          if [ -n "$BEFORE" ]; then
            CHANGED="$(git diff --name-only "$BEFORE" "$COMMIT_SHA" || true)"
          else
            # fallback: mudan√ßas do √∫ltimo commit
            CHANGED="$(git diff --name-only HEAD~1 HEAD || true)"
          fi

          COUNT_CHANGED=$(printf "%s\n" "$CHANGED" | sed '/^$/d' | wc -l | tr -d ' ')
          LIST_CHANGED=$(printf "%s\n" "$CHANGED" | sed '/^$/d' | head -n 10 | sed 's/^/‚Ä¢ /' | tr -d '\r')
          [ -z "$LIST_CHANGED" ] && LIST_CHANGED="‚Ä¢ (sem altera√ß√µes detectadas)"

          # autor amig√°vel
          if [ -n "$AUTHOR_NAME" ]; then
            if [ -n "$AUTHOR_USERNAME" ]; then
              AUTHOR_DISPLAY="${AUTHOR_NAME} (@${AUTHOR_USERNAME})"
            else
              AUTHOR_DISPLAY="${AUTHOR_NAME}"
            fi
          else
            AUTHOR_DISPLAY="${ACTOR}"
          fi

          # monte a mensagem no estilo "linha a linha"
          cat > msg.txt <<'INNEREOF'
          üí¨ **Evento:** push
          üë§ **Autor:** AUTHOR_DISPLAY_PLACEHOLDER
          üì¶ **Reposit√≥rio:** REPO_PLACEHOLDER
          üåø **Branch:** BRANCH_PLACEHOLDER
          üîñ **Commit:** `SHORT_SHA_PLACEHOLDER`
          üìù **T√≠tulo:** TITLE_PLACEHOLDER
          üóíÔ∏è **Descri√ß√£o:** BODY_PLACEHOLDER
          üóÇÔ∏è **Arquivos alterados:** COUNT_CHANGED_PLACEHOLDER
          LIST_CHANGED_PLACEHOLDER
          ‚è±Ô∏è **Criado em:** CREATED_AT_PLACEHOLDER
          üîó **Diff:** COMPARE_URL_PLACEHOLDER
          üîó **Commit:** COMMIT_URL_PLACEHOLDER
          INNEREOF

          # substitui os placeholders pelas vari√°veis reais
          sed -i "s|AUTHOR_DISPLAY_PLACEHOLDER|${AUTHOR_DISPLAY}|g" msg.txt
          sed -i "s|REPO_PLACEHOLDER|${REPO}|g" msg.txt
          sed -i "s|BRANCH_PLACEHOLDER|${BRANCH}|g" msg.txt
          sed -i "s|SHORT_SHA_PLACEHOLDER|${SHORT_SHA}|g" msg.txt
          sed -i "s|TITLE_PLACEHOLDER|${TITLE}|g" msg.txt
          sed -i "s|BODY_PLACEHOLDER|${BODY}|g" msg.txt
          sed -i "s|COUNT_CHANGED_PLACEHOLDER|${COUNT_CHANGED}|g" msg.txt
          sed -i "s|LIST_CHANGED_PLACEHOLDER|${LIST_CHANGED}|g" msg.txt
          sed -i "s|CREATED_AT_PLACEHOLDER|${CREATED_AT}|g" msg.txt
          sed -i "s|COMPARE_URL_PLACEHOLDER|${COMPARE_URL}|g" msg.txt
          sed -i "s|COMMIT_URL_PLACEHOLDER|${COMMIT_URL}|g" msg.txt

          # coloca o conte√∫do em vari√°vel de ambiente multilinha
          {
            echo "DISCORD_MESSAGE<<EOM"
            cat msg.txt
            echo "EOM"
          } >> "$GITHUB_ENV"

      - name: Enviar mensagem para o Discord
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          # Adicione username √∫nico com timestamp para for√ßar separa√ß√£o
          username: "Star Bot [${{ github.run_number }}]"
          # voc√™ pode personalizar avatar se quiser:
          # avatar_url: "https://i.imgur.com/xxxxx.png"
          message: ${{ env.DISCORD_MESSAGE }}
